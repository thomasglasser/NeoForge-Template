plugins {
	id 'java-library'
	id 'maven-publish'
	id 'signing'
	id 'com.diffplug.spotless' version '6.22.0'
	id 'net.neoforged.moddev' version "${mdg_version}"
}

tasks.named('wrapper', Wrapper).configure {
	distributionType = Wrapper.DistributionType.BIN
}

base {
	archivesName = "${mod_id}-${minecraft_version}"
}

java {
	toolchain.languageVersion = JavaLanguageVersion.of(java_version)
	withSourcesJar()
	withJavadocJar()
}

repositories {
	exclusiveContent {
		forRepository {
			maven {
				name = 'Modrinth'
				url = 'https://api.modrinth.com/maven'
			}
		}
		filter { includeGroupAndSubgroups "maven.modrinth" }
	}
	exclusiveContent {
		forRepository {
			maven {
				name = 'JEI'
				url = 'https://maven.blamejared.com/'
			}
		}
		filter { includeGroupAndSubgroups "mezz.jei" }
	}
	maven {
		name = 'TommyLib'
		url = 'https://dl.cloudsmith.io/public/thomasglasser/tommylib/maven/'
		content {
			includeGroupAndSubgroups("dev.thomasglasser.tommylib")
		}
	}
	maven {
		name = 'NeoForge'
		url = 'https://maven.neoforged.net/releases'
	}
	maven {
		name = 'Mojang Meta'
		url = 'https://maven.neoforged.net/mojang-meta'
	}
	mavenCentral()
	mavenLocal()
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

neoForge {
	version = "${neoforge_version}"

	parchment {
		minecraftVersion = parchment_minecraft_version
		mappingsVersion = parchment_version
	}

	runs {
		client {
			client()
			ideName = "Client"
			gameDirectory = project.layout.projectDirectory.dir('runs/client')
		}
		client_alt {
			client()
			ideName = "Client 2"
			gameDirectory = project.layout.projectDirectory.dir('runs/client_alt')
			programArguments = ["--username", "DevAlt"]
		}
		server {
			server()
			ideName = "Server"
			gameDirectory = project.layout.projectDirectory.dir('runs/server')
		}
		data {
			data()
			ideName = "Data Generation"
			gameDirectory = project.layout.projectDirectory.dir('runs/data')
			programArguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
		}
	}

	mods {
		neoforgetemplate {
			sourceSet sourceSets.main
		}
	}
}

configurations {
	runtimeClasspath.extendsFrom localRuntime
}

dependencies {
	jarJar implementation("dev.thomasglasser.tommylib:tommylib-neoforge-${minecraft_version}:${tommylib_version}")

	// Runtime
	localRuntime "maven.modrinth:jade:${jade_version}+neoforge"
	localRuntime "mezz.jei:jei-${minecraft_version}-neoforge:${jei_version}"
}

spotless {
	format 'misc', {
		target '*.gradle', '.gitattributes', '.gitignore'

		trimTrailingWhitespace()
		indentWithTabs()
	}
	java {
		endWithNewline()
		indentWithSpaces()
		removeUnusedImports()
		toggleOffOn()
		eclipse().configFile rootProject.file('codeformat/formatter-config.xml')
		importOrder()

		custom 'noWildcardImports', { String fileContents ->
			if (fileContents.contains('*;\n')) {
				throw new GradleException('No wildcard imports are allowed!')
			}
		}

		custom 'noNotNull', { String fileContents ->
			if (fileContents.contains('@NotNull') || fileContents.contains('@Nonnull')) {
				throw new GradleException('@NotNull and @Nonnull are disallowed.')
			}
		}

		custom 'jetbrainsNullable', { String fileContents ->
			fileContents.replace('javax.annotation.Nullable', 'org.jetbrains.annotations.Nullable')
		}
	}
}

tasks.named('spotlessMiscCheck') {
	dependsOn 'spotlessApply'
}

javadoc {
	failOnError = false
}

processResources {
	def expandProps = [
			"version": version,
			"group": project.group,
			"minecraft_version": minecraft_version,
			"next_minecraft_version": next_minecraft_version,
			"mod_name": mod_name,
			"mod_author": mod_author,
			"mod_id": mod_id,
			"license": license,
			"description": project.description,
			"neoforge_version": neoforge_version,
			"major_fml_version": major_fml_version,
			"contributors": contributors,
			"java_version": java_version,
			"icon": icon,
			"github_name": github_name,
			"tommylib_version": tommylib_version
	]

	filesMatching(['META-INF/neoforge.mods.toml', '*.mixins.json']) {
		expand expandProps
	}
	inputs.properties(expandProps)
}

publishing {
	publications {
		register('mavenJava', MavenPublication) {
			artifactId base.archivesName.get()
			from components.java
		}

		maven(MavenPublication) {
			pom {
				name = project.mod_name
				description = project.description
				url = "https://github.com/thomasglasser/${github_name}/wiki"
				licenses {
					license {
						name = project.license
						url = project.license_url
					}
				}
				developers {
					developer {
						id = project.mod_author
						name = project.mod_author
					}
				}
				issueManagement {
					system = 'GitHub'
					url = "https://github.com/thomasglasser/${github_name}/issues"
				}
				scm {
					connection = "scm:git:git://github.com/thomasglasser/${github_name}.git"
					developerConnection = "scm:git:ssh://github.com:thomasglasser/${github_name}.git"
					url = "https://github.com/thomasglasser/${github_name}/tree/${minecraft_version}"
				}
			}
		}
	}

	repositories {
		maven {
			name = "Cloudsmith"
			url = "https://maven.cloudsmith.io/thomasglasser/${mod_id}/"
			credentials {
				username = project.findProperty("CLOUDSMITH_USERNAME") ?: System.getenv("CLOUDSMITH_USERNAME")
				password = project.findProperty("CLOUDSMITH_API_KEY") ?: System.getenv("CLOUDSMITH_API_KEY")
			}
		}
	}
}

signing {
	useGpgCmd()
	sign publishing.publications
}

// Declare capabilities on the outgoing configurations.
// Read more about capabilities here: https://docs.gradle.org/current/userguide/component_capabilities.html#sec:declaring-additional-capabilities-for-a-local-component
['apiElements', 'runtimeElements', 'sourcesElements', 'javadocElements'].each { variant ->
	configurations."$variant".outgoing {
		capability("$group:${base.archivesName.get()}:$version")
		capability("$group:$mod_id-${project.name}-${minecraft_version}:$version")
		capability("$group:$mod_id:$version")
	}
	publishing.publications.configureEach {
		suppressPomMetadataWarningsFor(variant)
	}
}

jar {
	manifest {
		attributes([
				'Specification-Title'   : mod_name,
				'Specification-Vendor'  : mod_author,
				'Specification-Version' : project.jar.archiveVersion,
				'Implementation-Title'  : project.name,
				'Implementation-Version': project.jar.archiveVersion,
				'Implementation-Vendor' : mod_author,
				'Built-On-Minecraft'    : minecraft_version
		])
	}
}

idea {
	module {
		downloadSources = true
		downloadJavadoc = true
	}
}
