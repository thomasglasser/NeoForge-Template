plugins {
    id 'java-library'
    id 'maven-publish'
	id 'signing'
	id 'com.diffplug.spotless' version '6.22.0'
	id 'idea'
	id 'net.neoforged.moddev' version "$mdg_version"
}

tasks.named('wrapper', Wrapper).configure {
	distributionType = Wrapper.DistributionType.BIN
}

version = mod_version
group = mod_group_id

base {
	archivesName = "${mod_id}-${minecraft_version}"
}

java {
    toolchain.languageVersion = JavaLanguageVersion.of(java_version)
    withSourcesJar()
    withJavadocJar()
}

repositories {
    exclusiveContent {
        forRepository {
            maven {
                name = 'Modrinth'
                url = 'https://api.modrinth.com/maven'
            }
        }
        filter { includeGroupAndSubgroups "maven.modrinth" }
    }
    exclusiveContent {
        forRepository {
            maven {
                name = 'JEI'
                url = 'https://maven.blamejared.com/'
            }
        }
        filter { includeGroupAndSubgroups "mezz.jei" }
    }
    maven {
        name = 'TommyLib'
        url = 'https://dl.cloudsmith.io/public/thomasglasser/tommylib/maven/'
        content {
            includeGroupAndSubgroups("dev.thomasglasser.tommylib")
        }
    }
    maven {
        name = 'NeoForge'
        url = 'https://maven.neoforged.net/releases'
    }
    maven {
        name = 'Mojang Meta'
        url = 'https://maven.neoforged.net/mojang-meta'
    }
    mavenCentral()
    mavenLocal()
}

neoForge {
    version = project.neo_version

    parchment {
        mappingsVersion = project.parchment_version
        minecraftVersion = project.parchment_minecraft_version
    }

    runs {
        client {
            client()
        }

        client_2 {
            client()
            gameDirectory = project.layout.projectDirectory.dir('runs/client_2')
            programArguments = ["--username", "DevAlt"]
        }

        server {
            server()
        }

        // This run config launches GameTestServer and runs all registered gametests, then exits.
        // By default, the server will crash when no gametests are provided.
        // The gametest system is also enabled by default for other run configs under the /test command.
        gameTestServer {
            type = "gameTestServer"
        }

        data {
            data()

            programArguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
        }

        configureEach {
            systemProperty 'forge.logging.markers', 'REGISTRIES'
            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
            ideName = "${it.name.replace('_', ' ').capitalize()}"

            logLevel = org.slf4j.event.Level.DEBUG

			gameDirectory = project.layout.projectDirectory.dir("runs/$it.name")
		}
    }

    mods {
        "${mod_id}" {
            sourceSet(sourceSets.main)
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

configurations {
	runtimeClasspath.extendsFrom localRuntime
}

dependencies {
	jarJar implementation("dev.thomasglasser.tommylib:tommylib-neoforge-${minecraft_version}:${tommylib_version}")

	// Runtime
	localRuntime "maven.modrinth:jade:${jade_version}+neoforge"
//	localRuntime "mezz.jei:jei-${minecraft_version}-neoforge:${jei_version}"
}

spotless {
	format 'misc', {
		target '*.gradle', '.gitattributes', '.gitignore'

		trimTrailingWhitespace()
		indentWithTabs()
	}
	java {
		endWithNewline()
		indentWithSpaces()
		removeUnusedImports()
		toggleOffOn()
		eclipse().configFile rootProject.file('codeformat/formatter-config.xml')
		importOrder()

		custom 'noWildcardImports', { String fileContents ->
			if (fileContents.contains('*;\n')) {
				throw new GradleException('No wildcard imports are allowed!')
			}
		}

		custom 'noNotNull', { String fileContents ->
			if (fileContents.contains('@NotNull') || fileContents.contains('@Nonnull')) {
				throw new GradleException('@NotNull and @Nonnull are disallowed.')
			}
		}

		custom 'jetbrainsNullable', { String fileContents ->
			fileContents.replace('javax.annotation.Nullable', 'org.jetbrains.annotations.Nullable')
		}
	}
}

tasks.named('spotlessMiscCheck') {
	dependsOn 'spotlessApply'
}

javadoc {
	failOnError = false
}

var generateModMetadata = tasks.register("generateModMetadata", ProcessResources) {
    var replaceProperties = [
			mod_version: mod_version,
			mod_group_id: mod_group_id,
			minecraft_version: minecraft_version,
			next_minecraft_version: next_minecraft_version,
			mod_name: mod_name,
			mod_author: mod_author,
			mod_id: mod_id,
			mod_license: mod_license,
			mod_description: mod_description,
			neo_version: neo_version,
			major_fml_version: major_fml_version,
			mod_contributors: mod_contributors,
			java_version: java_version,
			mod_icon: mod_icon,
			github_name: github_name,
			tommylib_version: tommylib_version
	]

    inputs.properties replaceProperties
    expand replaceProperties
    from "src/main/templates"
    into "build/generated/sources/modMetadata"
}

// Include the output of "generateModMetadata" as an input directory for the build
// this works with both building through Gradle and the IDE.
sourceSets.main.resources.srcDir generateModMetadata
// To avoid having to run "generateModMetadata" manually, make it run on every project reload
neoForge.ideSyncTask generateModMetadata

publishing {
	publications {
		register('mavenJava', MavenPublication) {
			artifactId base.archivesName.get()
			from components.java
		}

		maven(MavenPublication) {
			pom {
				name = project.mod_name
				description = project.mod_description
				url = "https://github.com/thomasglasser/${github_name}/wiki"
				licenses {
					license {
						name = project.mod_license
						url = "https://github.com/thomasglasser/${github_name}/blob/${minecraft_version}/LICENSE"
					}
				}
				developers {
					developer {
						id = project.mod_author
						name = project.mod_author
					}
				}
				issueManagement {
					system = 'GitHub'
					url = "https://github.com/thomasglasser/${github_name}/issues"
				}
				scm {
					connection = "scm:git:git://github.com/thomasglasser/${github_name}.git"
					developerConnection = "scm:git:ssh://github.com:thomasglasser/${github_name}.git"
					url = "https://github.com/thomasglasser/${github_name}/tree/${minecraft_version}"
				}
			}
		}
	}

	repositories {
		maven {
			name = "Cloudsmith"
			url = "https://maven.cloudsmith.io/thomasglasser/${mod_id}/"
			credentials {
				username = project.findProperty("CLOUDSMITH_USERNAME") ?: System.getenv("CLOUDSMITH_USERNAME")
				password = project.findProperty("CLOUDSMITH_API_KEY") ?: System.getenv("CLOUDSMITH_API_KEY")
			}
		}
	}
}

signing {
	useGpgCmd()
	sign publishing.publications
}

// Declare capabilities on the outgoing configurations.
// Read more about capabilities here: https://docs.gradle.org/current/userguide/component_capabilities.html#sec:declaring-additional-capabilities-for-a-local-component
['apiElements', 'runtimeElements', 'sourcesElements', 'javadocElements'].each { variant ->
	configurations."$variant".outgoing {
		capability("$group:${base.archivesName.get()}:$version")
		capability("$group:$mod_id-${project.name}-${minecraft_version}:$version")
		capability("$group:$mod_id:$version")
	}
	publishing.publications.configureEach {
		suppressPomMetadataWarningsFor(variant)
	}
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

idea {
	module {
		downloadSources = true
		downloadJavadoc = true
	}
}
